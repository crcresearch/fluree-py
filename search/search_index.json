{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#project-overview","title":"Project Overview","text":""},{"location":"coverage/","title":"Coverage report","text":""},{"location":"reference/fluree_py/","title":"fluree_py","text":""},{"location":"reference/fluree_py/#fluree_py","title":"fluree_py","text":"<p>Modules:</p> <ul> <li> <code>client</code>           \u2013            </li> <li> <code>ledger</code>           \u2013            </li> <li> <code>query</code>           \u2013            </li> <li> <code>response</code>           \u2013            </li> <li> <code>types</code>           \u2013            <p>Common type definitions for the fluree-py package.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>FlureeClient</code>           \u2013            <p>Client for interacting with Fluree databases.</p> </li> </ul>"},{"location":"reference/fluree_py/#fluree_py.FlureeClient","title":"FlureeClient  <code>dataclass</code>","text":"<pre><code>FlureeClient(*, base_url: str)\n</code></pre> <p>Client for interacting with Fluree databases.</p> <p>Methods:</p> <ul> <li> <code>with_ledger</code>             \u2013              <p>Select a ledger to operate on.</p> </li> </ul>"},{"location":"reference/fluree_py/#fluree_py.FlureeClient.with_ledger","title":"with_ledger","text":"<pre><code>with_ledger(ledger: str) -&gt; SupportsLedgerOperations\n</code></pre> <p>Select a ledger to operate on.</p>"},{"location":"reference/fluree_py/client/","title":"fluree_py.client","text":""},{"location":"reference/fluree_py/client/#fluree_py.client","title":"client","text":"<p>Classes:</p> <ul> <li> <code>FlureeClient</code>           \u2013            <p>Client for interacting with Fluree databases.</p> </li> </ul>"},{"location":"reference/fluree_py/client/#fluree_py.client.FlureeClient","title":"FlureeClient  <code>dataclass</code>","text":"<pre><code>FlureeClient(*, base_url: str)\n</code></pre> <p>Client for interacting with Fluree databases.</p> <p>Methods:</p> <ul> <li> <code>with_ledger</code>             \u2013              <p>Select a ledger to operate on.</p> </li> </ul>"},{"location":"reference/fluree_py/client/#fluree_py.client.FlureeClient.with_ledger","title":"with_ledger","text":"<pre><code>with_ledger(ledger: str) -&gt; SupportsLedgerOperations\n</code></pre> <p>Select a ledger to operate on.</p>"},{"location":"reference/fluree_py/ledger/","title":"fluree_py.ledger","text":""},{"location":"reference/fluree_py/ledger/#fluree_py.ledger","title":"ledger","text":"<p>Modules:</p> <ul> <li> <code>builder</code>           \u2013            </li> <li> <code>ledger</code>           \u2013            </li> <li> <code>mixin</code>           \u2013            <p>Mixins for Fluree ledger operations providing request handling, data insertion, context management, and commit capabilities.</p> </li> <li> <code>protocol</code>           \u2013            </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/","title":"fluree_py.ledger.builder","text":""},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder","title":"builder","text":"<p>Modules:</p> <ul> <li> <code>create</code>           \u2013            </li> <li> <code>history</code>           \u2013            </li> <li> <code>query</code>           \u2013            </li> <li> <code>transaction</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>CreateBuilderImpl</code>           \u2013            <p>Implementation of a create operation builder.</p> </li> <li> <code>CreateReadyToCommitImpl</code>           \u2013            <p>Implementation of a create operation ready to be committed.</p> </li> <li> <code>HistoryBuilderImpl</code>           \u2013            <p>Implementation of a history query builder.</p> </li> <li> <code>QueryBuilderImpl</code>           \u2013            <p>Implementation of a query operation builder.</p> </li> <li> <code>TransactionBuilderImpl</code>           \u2013            <p>Implementation of a transaction operation builder.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateBuilderImpl","title":"CreateBuilderImpl  <code>dataclass</code>","text":"<pre><code>CreateBuilderImpl(\n    *, endpoint: str, ledger: str, data: JsonObject | JsonArray | None = None, context: dict[str, Any] | None = None\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['CreateBuilderImpl']</code>, <code>WithInsertMixin[CreateReadyToCommitImpl]</code>, <code>CreateBuilder</code></p> <p>Implementation of a create operation builder.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl","title":"CreateReadyToCommitImpl  <code>dataclass</code>","text":"<pre><code>CreateReadyToCommitImpl(\n    *, endpoint: str, ledger: str, data: JsonObject | JsonArray | None, context: dict[str, Any] | None = None\n)\n</code></pre> <p>               Bases: <code>RequestMixin</code>, <code>WithContextMixin['CreateReadyToCommitImpl']</code>, <code>WithInsertMixin['CreateReadyToCommitImpl']</code>, <code>CommitableMixin['CreateReadyToCommitImpl']</code>, <code>CreateReadyToCommit</code></p> <p>Implementation of a create operation ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the create operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the create operation.</p> </li> <li> <code>with_context</code>             \u2013              <p>Updates the operation's context with new data.</p> </li> <li> <code>with_insert</code>             \u2013              <p>Updates the operation with new data to be inserted.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the create operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the create operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.with_context","title":"with_context","text":"<pre><code>with_context(context: dict[str, Any]) -&gt; T\n</code></pre> <p>Updates the operation's context with new data.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.CreateReadyToCommitImpl.with_insert","title":"with_insert","text":"<pre><code>with_insert(data: JsonObject | JsonArray) -&gt; T\n</code></pre> <p>Updates the operation with new data to be inserted.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl","title":"HistoryBuilderImpl  <code>dataclass</code>","text":"<pre><code>HistoryBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    history: HistoryClause | None = None,\n    t: TimeClause | None = None,\n    commit_details: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>RequestMixin</code>, <code>WithContextMixin['HistoryBuilderImpl']</code>, <code>CommitableMixin['HistoryBuilderImpl']</code>, <code>HistoryBuilder</code></p> <p>Implementation of a history query builder.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the history query operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the history query operation.</p> </li> <li> <code>with_commit_details</code>             \u2013              <p>Add commit details flag to the query.</p> </li> <li> <code>with_history</code>             \u2013              <p>Add history clause to the query.</p> </li> <li> <code>with_t</code>             \u2013              <p>Add time clause to the query.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the history query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the history query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.with_commit_details","title":"with_commit_details","text":"<pre><code>with_commit_details(commit_details: bool) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add commit details flag to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.with_history","title":"with_history","text":"<pre><code>with_history(history: HistoryClause) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add history clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.HistoryBuilderImpl.with_t","title":"with_t","text":"<pre><code>with_t(t: TimeClause) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add time clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl","title":"QueryBuilderImpl  <code>dataclass</code>","text":"<pre><code>QueryBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    where: WhereClause | None = None,\n    group_by: GroupByClause | None = None,\n    having: HavingClause | None = None,\n    order_by: OrderByClause | None = None,\n    opts: ActiveIdentity | None = None,\n    select_fields: dict[str, Any] | list[str] | None = None,\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['QueryBuilderImpl']</code>, <code>WithWhereMixin['QueryBuilderImpl']</code>, <code>RequestMixin</code>, <code>CommitableMixin['QueryBuilderImpl']</code>, <code>QueryBuilder</code></p> <p>Implementation of a query operation builder.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the query operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the query operation.</p> </li> <li> <code>with_group_by</code>             \u2013              <p>Add group by clause to the query.</p> </li> <li> <code>with_having</code>             \u2013              <p>Add having clause to the query.</p> </li> <li> <code>with_opts</code>             \u2013              <p>Add query options to the query.</p> </li> <li> <code>with_order_by</code>             \u2013              <p>Add order by clause to the query.</p> </li> <li> <code>with_select</code>             \u2013              <p>Add select fields to the query.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.with_group_by","title":"with_group_by","text":"<pre><code>with_group_by(fields: GroupByClause) -&gt; Self\n</code></pre> <p>Add group by clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.with_having","title":"with_having","text":"<pre><code>with_having(condition: HavingClause) -&gt; Self\n</code></pre> <p>Add having clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.with_opts","title":"with_opts","text":"<pre><code>with_opts(opts: ActiveIdentity) -&gt; Self\n</code></pre> <p>Add query options to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.with_order_by","title":"with_order_by","text":"<pre><code>with_order_by(fields: OrderByClause) -&gt; Self\n</code></pre> <p>Add order by clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.QueryBuilderImpl.with_select","title":"with_select","text":"<pre><code>with_select(fields: SelectObject | SelectArray) -&gt; Self\n</code></pre> <p>Add select fields to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.TransactionBuilderImpl","title":"TransactionBuilderImpl  <code>dataclass</code>","text":"<pre><code>TransactionBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    where: WhereClause | None = None,\n    data: JsonObject | JsonArray | None = None,\n    delete_data: JsonObject | JsonArray | None = None,\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['TransactionBuilderImpl']</code>, <code>WithInsertMixin['TransactionReadyToCommitImpl']</code>, <code>WithWhereMixin['TransactionBuilderImpl']</code>, <code>TransactionBuilder</code></p> <p>Implementation of a transaction operation builder.</p> <p>Methods:</p> <ul> <li> <code>with_delete</code>             \u2013              <p>Add delete operation to the transaction.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/#fluree_py.ledger.builder.TransactionBuilderImpl.with_delete","title":"with_delete","text":"<pre><code>with_delete(data: JsonObject | JsonArray) -&gt; TransactionReadyToCommitImpl\n</code></pre> <p>Add delete operation to the transaction.</p>"},{"location":"reference/fluree_py/ledger/builder/create/","title":"fluree_py.ledger.builder.create","text":""},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create","title":"create","text":"<p>Classes:</p> <ul> <li> <code>CreateBuilderImpl</code>           \u2013            <p>Implementation of a create operation builder.</p> </li> <li> <code>CreateReadyToCommitImpl</code>           \u2013            <p>Implementation of a create operation ready to be committed.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateBuilderImpl","title":"CreateBuilderImpl  <code>dataclass</code>","text":"<pre><code>CreateBuilderImpl(\n    *, endpoint: str, ledger: str, data: JsonObject | JsonArray | None = None, context: dict[str, Any] | None = None\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['CreateBuilderImpl']</code>, <code>WithInsertMixin[CreateReadyToCommitImpl]</code>, <code>CreateBuilder</code></p> <p>Implementation of a create operation builder.</p>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl","title":"CreateReadyToCommitImpl  <code>dataclass</code>","text":"<pre><code>CreateReadyToCommitImpl(\n    *, endpoint: str, ledger: str, data: JsonObject | JsonArray | None, context: dict[str, Any] | None = None\n)\n</code></pre> <p>               Bases: <code>RequestMixin</code>, <code>WithContextMixin['CreateReadyToCommitImpl']</code>, <code>WithInsertMixin['CreateReadyToCommitImpl']</code>, <code>CommitableMixin['CreateReadyToCommitImpl']</code>, <code>CreateReadyToCommit</code></p> <p>Implementation of a create operation ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the create operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the create operation.</p> </li> <li> <code>with_context</code>             \u2013              <p>Updates the operation's context with new data.</p> </li> <li> <code>with_insert</code>             \u2013              <p>Updates the operation with new data to be inserted.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the create operation.</p>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the create operation.</p>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.with_context","title":"with_context","text":"<pre><code>with_context(context: dict[str, Any]) -&gt; T\n</code></pre> <p>Updates the operation's context with new data.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/create/#fluree_py.ledger.builder.create.CreateReadyToCommitImpl.with_insert","title":"with_insert","text":"<pre><code>with_insert(data: JsonObject | JsonArray) -&gt; T\n</code></pre> <p>Updates the operation with new data to be inserted.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/history/","title":"fluree_py.ledger.builder.history","text":""},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history","title":"history","text":"<p>Classes:</p> <ul> <li> <code>HistoryBuilderImpl</code>           \u2013            <p>Implementation of a history query builder.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl","title":"HistoryBuilderImpl  <code>dataclass</code>","text":"<pre><code>HistoryBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    history: HistoryClause | None = None,\n    t: TimeClause | None = None,\n    commit_details: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>RequestMixin</code>, <code>WithContextMixin['HistoryBuilderImpl']</code>, <code>CommitableMixin['HistoryBuilderImpl']</code>, <code>HistoryBuilder</code></p> <p>Implementation of a history query builder.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the history query operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the history query operation.</p> </li> <li> <code>with_commit_details</code>             \u2013              <p>Add commit details flag to the query.</p> </li> <li> <code>with_history</code>             \u2013              <p>Add history clause to the query.</p> </li> <li> <code>with_t</code>             \u2013              <p>Add time clause to the query.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the history query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the history query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.with_commit_details","title":"with_commit_details","text":"<pre><code>with_commit_details(commit_details: bool) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add commit details flag to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.with_history","title":"with_history","text":"<pre><code>with_history(history: HistoryClause) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add history clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/history/#fluree_py.ledger.builder.history.HistoryBuilderImpl.with_t","title":"with_t","text":"<pre><code>with_t(t: TimeClause) -&gt; HistoryBuilderImpl\n</code></pre> <p>Add time clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/query/","title":"fluree_py.ledger.builder.query","text":""},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query","title":"query","text":"<p>Classes:</p> <ul> <li> <code>QueryBuilderImpl</code>           \u2013            <p>Implementation of a query operation builder.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl","title":"QueryBuilderImpl  <code>dataclass</code>","text":"<pre><code>QueryBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    where: WhereClause | None = None,\n    group_by: GroupByClause | None = None,\n    having: HavingClause | None = None,\n    order_by: OrderByClause | None = None,\n    opts: ActiveIdentity | None = None,\n    select_fields: dict[str, Any] | list[str] | None = None,\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['QueryBuilderImpl']</code>, <code>WithWhereMixin['QueryBuilderImpl']</code>, <code>RequestMixin</code>, <code>CommitableMixin['QueryBuilderImpl']</code>, <code>QueryBuilder</code></p> <p>Implementation of a query operation builder.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the query operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the query operation.</p> </li> <li> <code>with_group_by</code>             \u2013              <p>Add group by clause to the query.</p> </li> <li> <code>with_having</code>             \u2013              <p>Add having clause to the query.</p> </li> <li> <code>with_opts</code>             \u2013              <p>Add query options to the query.</p> </li> <li> <code>with_order_by</code>             \u2013              <p>Add order by clause to the query.</p> </li> <li> <code>with_select</code>             \u2013              <p>Add select fields to the query.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the query operation.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.with_group_by","title":"with_group_by","text":"<pre><code>with_group_by(fields: GroupByClause) -&gt; Self\n</code></pre> <p>Add group by clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.with_having","title":"with_having","text":"<pre><code>with_having(condition: HavingClause) -&gt; Self\n</code></pre> <p>Add having clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.with_opts","title":"with_opts","text":"<pre><code>with_opts(opts: ActiveIdentity) -&gt; Self\n</code></pre> <p>Add query options to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.with_order_by","title":"with_order_by","text":"<pre><code>with_order_by(fields: OrderByClause) -&gt; Self\n</code></pre> <p>Add order by clause to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/query/#fluree_py.ledger.builder.query.QueryBuilderImpl.with_select","title":"with_select","text":"<pre><code>with_select(fields: SelectObject | SelectArray) -&gt; Self\n</code></pre> <p>Add select fields to the query.</p>"},{"location":"reference/fluree_py/ledger/builder/transaction/","title":"fluree_py.ledger.builder.transaction","text":""},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction","title":"transaction","text":"<p>Classes:</p> <ul> <li> <code>TransactionBuilderImpl</code>           \u2013            <p>Implementation of a transaction operation builder.</p> </li> <li> <code>TransactionReadyToCommitImpl</code>           \u2013            <p>Implementation of a transaction operation ready to be committed.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionBuilderImpl","title":"TransactionBuilderImpl  <code>dataclass</code>","text":"<pre><code>TransactionBuilderImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None = None,\n    where: WhereClause | None = None,\n    data: JsonObject | JsonArray | None = None,\n    delete_data: JsonObject | JsonArray | None = None,\n)\n</code></pre> <p>               Bases: <code>WithContextMixin['TransactionBuilderImpl']</code>, <code>WithInsertMixin['TransactionReadyToCommitImpl']</code>, <code>WithWhereMixin['TransactionBuilderImpl']</code>, <code>TransactionBuilder</code></p> <p>Implementation of a transaction operation builder.</p> <p>Methods:</p> <ul> <li> <code>with_delete</code>             \u2013              <p>Add delete operation to the transaction.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionBuilderImpl.with_delete","title":"with_delete","text":"<pre><code>with_delete(data: JsonObject | JsonArray) -&gt; TransactionReadyToCommitImpl\n</code></pre> <p>Add delete operation to the transaction.</p>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl","title":"TransactionReadyToCommitImpl  <code>dataclass</code>","text":"<pre><code>TransactionReadyToCommitImpl(\n    *,\n    endpoint: str,\n    ledger: str,\n    context: dict[str, Any] | None,\n    where: WhereClause | None,\n    data: JsonObject | JsonArray | None,\n    delete_data: JsonObject | JsonArray | None,\n)\n</code></pre> <p>               Bases: <code>RequestMixin</code>, <code>WithContextMixin['TransactionReadyToCommitImpl']</code>, <code>WithWhereMixin['TransactionReadyToCommitImpl']</code>, <code>CommitableMixin['TransactionReadyToCommitImpl']</code>, <code>TransactionReadyToCommit</code></p> <p>Implementation of a transaction operation ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>build_request_payload</code>             \u2013              <p>Build the request payload for the transaction operation.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> <li> <code>get_url</code>             \u2013              <p>Get the endpoint URL for the transaction operation.</p> </li> <li> <code>with_delete</code>             \u2013              <p>Add delete operation to the transaction.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl.build_request_payload","title":"build_request_payload","text":"<pre><code>build_request_payload() -&gt; dict[str, Any]\n</code></pre> <p>Build the request payload for the transaction operation.</p>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get the endpoint URL for the transaction operation.</p>"},{"location":"reference/fluree_py/ledger/builder/transaction/#fluree_py.ledger.builder.transaction.TransactionReadyToCommitImpl.with_delete","title":"with_delete","text":"<pre><code>with_delete(data: JsonObject | JsonArray) -&gt; TransactionReadyToCommitImpl\n</code></pre> <p>Add delete operation to the transaction.</p>"},{"location":"reference/fluree_py/ledger/ledger/","title":"fluree_py.ledger.ledger","text":""},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger","title":"ledger","text":"<p>Classes:</p> <ul> <li> <code>LedgerSelected</code>           \u2013            <p>Selected ledger for operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger.LedgerSelected","title":"LedgerSelected  <code>dataclass</code>","text":"<pre><code>LedgerSelected(*, base_url: str, ledger: str)\n</code></pre> <p>Selected ledger for operations.</p> <p>Methods:</p> <ul> <li> <code>create</code>             \u2013              <p>Create a new ledger.</p> </li> <li> <code>history</code>             \u2013              <p>Query ledger history.</p> </li> <li> <code>query</code>             \u2013              <p>Query the ledger.</p> </li> <li> <code>transaction</code>             \u2013              <p>Execute ledger transactions.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger.LedgerSelected.create","title":"create","text":"<pre><code>create() -&gt; CreateBuilder\n</code></pre> <p>Create a new ledger.</p>"},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger.LedgerSelected.history","title":"history","text":"<pre><code>history() -&gt; HistoryBuilder\n</code></pre> <p>Query ledger history.</p>"},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger.LedgerSelected.query","title":"query","text":"<pre><code>query() -&gt; QueryBuilder\n</code></pre> <p>Query the ledger.</p>"},{"location":"reference/fluree_py/ledger/ledger/#fluree_py.ledger.ledger.LedgerSelected.transaction","title":"transaction","text":"<pre><code>transaction() -&gt; TransactionBuilder\n</code></pre> <p>Execute ledger transactions.</p>"},{"location":"reference/fluree_py/ledger/mixin/","title":"fluree_py.ledger.mixin","text":""},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin","title":"mixin","text":"<p>Mixins for Fluree ledger operations providing request handling, data insertion, context management, and commit capabilities.</p> <p>Modules:</p> <ul> <li> <code>commit</code>           \u2013            <p>Mixins for committing transactions to the Fluree ledger.</p> </li> <li> <code>context</code>           \u2013            <p>Mixin for managing context data in Fluree operations.</p> </li> <li> <code>insert</code>           \u2013            <p>Mixin for handling data insertion operations in Fluree.</p> </li> <li> <code>request</code>           \u2013            <p>Base mixin for HTTP request handling in Fluree operations.</p> </li> <li> <code>utils</code>           \u2013            <p>Utility functions for resolving generic type parameters in mixins.</p> </li> <li> <code>where</code>           \u2013            <p>Mixin for handling where clause operations in Fluree queries.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AsyncCommitMixin</code>           \u2013            <p>Asynchronous commit functionality for Fluree transactions.</p> </li> <li> <code>CommitMixin</code>           \u2013            <p>Synchronous commit functionality for Fluree transactions.</p> </li> <li> <code>CommitableMixin</code>           \u2013            <p>Combines synchronous and asynchronous commit capabilities.</p> </li> <li> <code>RequestMixin</code>           \u2013            <p>Base class for creating and managing HTTP requests.</p> </li> <li> <code>WithContextMixin</code>           \u2013            <p>Provides context management for Fluree operations.</p> </li> <li> <code>WithInsertMixin</code>           \u2013            <p>Provides data insertion capabilities for Fluree operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.AsyncCommitMixin","title":"AsyncCommitMixin","text":"<p>               Bases: <code>SupportsAsyncCommit</code>, <code>Generic[T]</code></p> <p>Asynchronous commit functionality for Fluree transactions.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.AsyncCommitMixin.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.CommitMixin","title":"CommitMixin","text":"<p>               Bases: <code>SupportsCommit</code>, <code>Generic[T]</code></p> <p>Synchronous commit functionality for Fluree transactions.</p> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.CommitMixin.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.CommitableMixin","title":"CommitableMixin","text":"<p>               Bases: <code>CommitMixin[T]</code>, <code>AsyncCommitMixin[T]</code>, <code>Generic[T]</code></p> <p>Combines synchronous and asynchronous commit capabilities.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.CommitableMixin.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.CommitableMixin.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.RequestMixin","title":"RequestMixin  <code>dataclass</code>","text":"<pre><code>RequestMixin()\n</code></pre> <p>               Bases: <code>ABC</code>, <code>SupportsRequestCreation</code></p> <p>Base class for creating and managing HTTP requests.</p> <p>Methods:</p> <ul> <li> <code>build_request_payload</code>             \u2013              <p>Constructs the JSON payload for the request.</p> </li> <li> <code>get_request</code>             \u2013              <p>Constructs an HTTP request with the operation's data.</p> </li> <li> <code>get_url</code>             \u2013              <p>Returns the endpoint URL for the request.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.RequestMixin.build_request_payload","title":"build_request_payload  <code>abstractmethod</code>","text":"<pre><code>build_request_payload() -&gt; JsonObject\n</code></pre> <p>Constructs the JSON payload for the request.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If not implemented by subclass.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.RequestMixin.get_request","title":"get_request","text":"<pre><code>get_request() -&gt; Request\n</code></pre> <p>Constructs an HTTP request with the operation's data.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If get_url() or build_request_payload() are not implemented.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.RequestMixin.get_url","title":"get_url  <code>abstractmethod</code>","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Returns the endpoint URL for the request.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If not implemented by subclass.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.WithContextMixin","title":"WithContextMixin","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Provides context management for Fluree operations.</p> <p>Methods:</p> <ul> <li> <code>with_context</code>             \u2013              <p>Updates the operation's context with new data.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.WithContextMixin.with_context","title":"with_context","text":"<pre><code>with_context(context: dict[str, Any]) -&gt; T\n</code></pre> <p>Updates the operation's context with new data.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.WithInsertMixin","title":"WithInsertMixin","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Provides data insertion capabilities for Fluree operations.</p> <p>Methods:</p> <ul> <li> <code>with_insert</code>             \u2013              <p>Updates the operation with new data to be inserted.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/#fluree_py.ledger.mixin.WithInsertMixin.with_insert","title":"with_insert","text":"<pre><code>with_insert(data: JsonObject | JsonArray) -&gt; T\n</code></pre> <p>Updates the operation with new data to be inserted.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/","title":"fluree_py.ledger.mixin.commit","text":""},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit","title":"commit","text":"<p>Mixins for committing transactions to the Fluree ledger.</p> <p>Classes:</p> <ul> <li> <code>AsyncCommitMixin</code>           \u2013            <p>Asynchronous commit functionality for Fluree transactions.</p> </li> <li> <code>CommitMixin</code>           \u2013            <p>Synchronous commit functionality for Fluree transactions.</p> </li> <li> <code>CommitableMixin</code>           \u2013            <p>Combines synchronous and asynchronous commit capabilities.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.AsyncCommitMixin","title":"AsyncCommitMixin","text":"<p>               Bases: <code>SupportsAsyncCommit</code>, <code>Generic[T]</code></p> <p>Asynchronous commit functionality for Fluree transactions.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.AsyncCommitMixin.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.CommitMixin","title":"CommitMixin","text":"<p>               Bases: <code>SupportsCommit</code>, <code>Generic[T]</code></p> <p>Synchronous commit functionality for Fluree transactions.</p> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.CommitMixin.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.CommitableMixin","title":"CommitableMixin","text":"<p>               Bases: <code>CommitMixin[T]</code>, <code>AsyncCommitMixin[T]</code>, <code>Generic[T]</code></p> <p>Combines synchronous and asynchronous commit capabilities.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.CommitableMixin.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/commit/#fluree_py.ledger.mixin.commit.CommitableMixin.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/context/","title":"fluree_py.ledger.mixin.context","text":""},{"location":"reference/fluree_py/ledger/mixin/context/#fluree_py.ledger.mixin.context","title":"context","text":"<p>Mixin for managing context data in Fluree operations.</p> <p>Classes:</p> <ul> <li> <code>WithContextMixin</code>           \u2013            <p>Provides context management for Fluree operations.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>T</code>           \u2013            <p>Ensure that the type we are trying to create has a context attribute.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/context/#fluree_py.ledger.mixin.context.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T', bound='HasContextData')\n</code></pre> <p>Ensure that the type we are trying to create has a context attribute.</p>"},{"location":"reference/fluree_py/ledger/mixin/context/#fluree_py.ledger.mixin.context.WithContextMixin","title":"WithContextMixin","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Provides context management for Fluree operations.</p> <p>Methods:</p> <ul> <li> <code>with_context</code>             \u2013              <p>Updates the operation's context with new data.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/context/#fluree_py.ledger.mixin.context.WithContextMixin.with_context","title":"with_context","text":"<pre><code>with_context(context: dict[str, Any]) -&gt; T\n</code></pre> <p>Updates the operation's context with new data.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/insert/","title":"fluree_py.ledger.mixin.insert","text":""},{"location":"reference/fluree_py/ledger/mixin/insert/#fluree_py.ledger.mixin.insert","title":"insert","text":"<p>Mixin for handling data insertion operations in Fluree.</p> <p>Classes:</p> <ul> <li> <code>WithInsertMixin</code>           \u2013            <p>Provides data insertion capabilities for Fluree operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/insert/#fluree_py.ledger.mixin.insert.WithInsertMixin","title":"WithInsertMixin","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Provides data insertion capabilities for Fluree operations.</p> <p>Methods:</p> <ul> <li> <code>with_insert</code>             \u2013              <p>Updates the operation with new data to be inserted.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/insert/#fluree_py.ledger.mixin.insert.WithInsertMixin.with_insert","title":"with_insert","text":"<pre><code>with_insert(data: JsonObject | JsonArray) -&gt; T\n</code></pre> <p>Updates the operation with new data to be inserted.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/request/","title":"fluree_py.ledger.mixin.request","text":""},{"location":"reference/fluree_py/ledger/mixin/request/#fluree_py.ledger.mixin.request","title":"request","text":"<p>Base mixin for HTTP request handling in Fluree operations.</p> <p>Classes:</p> <ul> <li> <code>RequestMixin</code>           \u2013            <p>Base class for creating and managing HTTP requests.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/request/#fluree_py.ledger.mixin.request.RequestMixin","title":"RequestMixin  <code>dataclass</code>","text":"<pre><code>RequestMixin()\n</code></pre> <p>               Bases: <code>ABC</code>, <code>SupportsRequestCreation</code></p> <p>Base class for creating and managing HTTP requests.</p> <p>Methods:</p> <ul> <li> <code>build_request_payload</code>             \u2013              <p>Constructs the JSON payload for the request.</p> </li> <li> <code>get_request</code>             \u2013              <p>Constructs an HTTP request with the operation's data.</p> </li> <li> <code>get_url</code>             \u2013              <p>Returns the endpoint URL for the request.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/request/#fluree_py.ledger.mixin.request.RequestMixin.build_request_payload","title":"build_request_payload  <code>abstractmethod</code>","text":"<pre><code>build_request_payload() -&gt; JsonObject\n</code></pre> <p>Constructs the JSON payload for the request.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If not implemented by subclass.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/request/#fluree_py.ledger.mixin.request.RequestMixin.get_request","title":"get_request","text":"<pre><code>get_request() -&gt; Request\n</code></pre> <p>Constructs an HTTP request with the operation's data.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If get_url() or build_request_payload() are not implemented.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/request/#fluree_py.ledger.mixin.request.RequestMixin.get_url","title":"get_url  <code>abstractmethod</code>","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Returns the endpoint URL for the request.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If not implemented by subclass.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/utils/","title":"fluree_py.ledger.mixin.utils","text":""},{"location":"reference/fluree_py/ledger/mixin/utils/#fluree_py.ledger.mixin.utils","title":"utils","text":"<p>Utility functions for resolving generic type parameters in mixins.</p> <p>Functions:</p> <ul> <li> <code>find_base_class</code>             \u2013              <p>Locates a base class by name in the class's original bases.</p> </li> <li> <code>resolve_base_class_reference</code>             \u2013              <p>Resolves the type parameter from a generic base class.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/utils/#fluree_py.ledger.mixin.utils.find_base_class","title":"find_base_class","text":"<pre><code>find_base_class(cls: type[Any], base_name: str) -&gt; type[Any]\n</code></pre> <p>Locates a base class by name in the class's original bases.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the base class cannot be found.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/utils/#fluree_py.ledger.mixin.utils.resolve_base_class_reference","title":"resolve_base_class_reference","text":"<pre><code>resolve_base_class_reference(cls: type[Any], base_name: str) -&gt; type[Any]\n</code></pre> <p>Resolves the type parameter from a generic base class.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If no type argument is found or if the type cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/where/","title":"fluree_py.ledger.mixin.where","text":""},{"location":"reference/fluree_py/ledger/mixin/where/#fluree_py.ledger.mixin.where","title":"where","text":"<p>Mixin for handling where clause operations in Fluree queries.</p> <p>Classes:</p> <ul> <li> <code>WithWhereMixin</code>           \u2013            <p>Provides where clause capabilities for Fluree queries.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/where/#fluree_py.ledger.mixin.where.WithWhereMixin","title":"WithWhereMixin","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Provides where clause capabilities for Fluree queries.</p> <p>Methods:</p> <ul> <li> <code>with_where</code>             \u2013              <p>Updates the query with a new where clause.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/mixin/where/#fluree_py.ledger.mixin.where.WithWhereMixin.with_where","title":"with_where","text":"<pre><code>with_where(clause: WhereClause) -&gt; T\n</code></pre> <p>Updates the query with a new where clause.</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/","title":"fluree_py.ledger.protocol","text":""},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol","title":"protocol","text":"<p>Modules:</p> <ul> <li> <code>endpoint</code>           \u2013            </li> <li> <code>ledger</code>           \u2013            </li> <li> <code>mixin</code>           \u2013            <p>Protocol mixin modules for Fluree ledger operations.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CreateBuilder</code>           \u2013            <p>Protocol for building create operations.</p> </li> <li> <code>HistoryBuilder</code>           \u2013            <p>Protocol for history builders.</p> </li> <li> <code>QueryBuilder</code>           \u2013            <p>Protocol for building query operations.</p> </li> <li> <code>SupportsCommitable</code>           \u2013            <p>Protocol for objects that support both sync and async commit operations.</p> </li> <li> <code>SupportsContext</code>           \u2013            <p>Protocol for objects that support context operations.</p> </li> <li> <code>SupportsInsert</code>           \u2013            <p>Protocol for objects that support insert operations.</p> </li> <li> <code>SupportsWhere</code>           \u2013            <p>Protocol for objects that support where clause operations.</p> </li> <li> <code>TransactionBuilder</code>           \u2013            <p>Protocol for building transaction operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.CreateBuilder","title":"CreateBuilder","text":"<p>               Bases: <code>SupportsContext['CreateBuilder']</code>, <code>SupportsInsert['CreateReadyToCommit']</code>, <code>Protocol</code></p> <p>Protocol for building create operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.HistoryBuilder","title":"HistoryBuilder","text":"<p>               Bases: <code>SupportsContext['HistoryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for history builders.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.HistoryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.HistoryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.QueryBuilder","title":"QueryBuilder","text":"<p>               Bases: <code>SupportsContext['QueryBuilder']</code>, <code>SupportsWhere['QueryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for building query operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.QueryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.QueryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsCommitable","title":"SupportsCommitable","text":"<p>               Bases: <code>SupportsCommit</code>, <code>SupportsAsyncCommit</code>, <code>Protocol</code></p> <p>Protocol for objects that support both sync and async commit operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsCommitable.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsCommitable.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsContext","title":"SupportsContext","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support context operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsInsert","title":"SupportsInsert","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support insert operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.SupportsWhere","title":"SupportsWhere","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support where clause operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/#fluree_py.ledger.protocol.TransactionBuilder","title":"TransactionBuilder","text":"<p>               Bases: <code>SupportsContext['TransactionBuilder']</code>, <code>SupportsInsert['TransactionReadyToCommit']</code>, <code>SupportsWhere['TransactionBuilder']</code>, <code>Protocol</code></p> <p>Protocol for building transaction operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/","title":"fluree_py.ledger.protocol.endpoint","text":""},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint","title":"endpoint","text":"<p>Modules:</p> <ul> <li> <code>create</code>           \u2013            <p>Protocols for creating new entities in the Fluree ledger.</p> </li> <li> <code>history</code>           \u2013            <p>Protocols and types for querying historical data in the Fluree ledger.</p> </li> <li> <code>query</code>           \u2013            <p>Protocols and types for building and executing queries in the Fluree ledger.</p> </li> <li> <code>transaction</code>           \u2013            <p>Protocols for building and executing transactions in the Fluree ledger.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CreateBuilder</code>           \u2013            <p>Protocol for building create operations.</p> </li> <li> <code>CreateReadyToCommit</code>           \u2013            <p>Protocol for create operations ready to be committed.</p> </li> <li> <code>HistoryBuilder</code>           \u2013            <p>Protocol for history builders.</p> </li> <li> <code>QueryBuilder</code>           \u2013            <p>Protocol for building query operations.</p> </li> <li> <code>TransactionBuilder</code>           \u2013            <p>Protocol for building transaction operations.</p> </li> <li> <code>TransactionReadyToCommit</code>           \u2013            <p>Protocol for transaction operations ready to be committed.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.CreateBuilder","title":"CreateBuilder","text":"<p>               Bases: <code>SupportsContext['CreateBuilder']</code>, <code>SupportsInsert['CreateReadyToCommit']</code>, <code>Protocol</code></p> <p>Protocol for building create operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.CreateReadyToCommit","title":"CreateReadyToCommit","text":"<p>               Bases: <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>HasInsertData</code>, <code>HasContextData</code>, <code>Protocol</code></p> <p>Protocol for create operations ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.CreateReadyToCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.CreateReadyToCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.HistoryBuilder","title":"HistoryBuilder","text":"<p>               Bases: <code>SupportsContext['HistoryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for history builders.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.HistoryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.HistoryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.QueryBuilder","title":"QueryBuilder","text":"<p>               Bases: <code>SupportsContext['QueryBuilder']</code>, <code>SupportsWhere['QueryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for building query operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.QueryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.QueryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.TransactionBuilder","title":"TransactionBuilder","text":"<p>               Bases: <code>SupportsContext['TransactionBuilder']</code>, <code>SupportsInsert['TransactionReadyToCommit']</code>, <code>SupportsWhere['TransactionBuilder']</code>, <code>Protocol</code></p> <p>Protocol for building transaction operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.TransactionReadyToCommit","title":"TransactionReadyToCommit","text":"<p>               Bases: <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>SupportsContext['TransactionReadyToCommit']</code>, <code>SupportsWhere['TransactionReadyToCommit']</code>, <code>HasInsertData</code>, <code>Protocol</code></p> <p>Protocol for transaction operations ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.TransactionReadyToCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/#fluree_py.ledger.protocol.endpoint.TransactionReadyToCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/","title":"fluree_py.ledger.protocol.endpoint.create","text":""},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/#fluree_py.ledger.protocol.endpoint.create","title":"create","text":"<p>Protocols for creating new entities in the Fluree ledger.</p> <p>Classes:</p> <ul> <li> <code>CreateBuilder</code>           \u2013            <p>Protocol for building create operations.</p> </li> <li> <code>CreateReadyToCommit</code>           \u2013            <p>Protocol for create operations ready to be committed.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/#fluree_py.ledger.protocol.endpoint.create.CreateBuilder","title":"CreateBuilder","text":"<p>               Bases: <code>SupportsContext['CreateBuilder']</code>, <code>SupportsInsert['CreateReadyToCommit']</code>, <code>Protocol</code></p> <p>Protocol for building create operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/#fluree_py.ledger.protocol.endpoint.create.CreateReadyToCommit","title":"CreateReadyToCommit","text":"<p>               Bases: <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>HasInsertData</code>, <code>HasContextData</code>, <code>Protocol</code></p> <p>Protocol for create operations ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/#fluree_py.ledger.protocol.endpoint.create.CreateReadyToCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/create/#fluree_py.ledger.protocol.endpoint.create.CreateReadyToCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/history/","title":"fluree_py.ledger.protocol.endpoint.history","text":""},{"location":"reference/fluree_py/ledger/protocol/endpoint/history/#fluree_py.ledger.protocol.endpoint.history","title":"history","text":"<p>Protocols and types for querying historical data in the Fluree ledger.</p> <p>Classes:</p> <ul> <li> <code>HistoryBuilder</code>           \u2013            <p>Protocol for history builders.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/history/#fluree_py.ledger.protocol.endpoint.history.HistoryBuilder","title":"HistoryBuilder","text":"<p>               Bases: <code>SupportsContext['HistoryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for history builders.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/history/#fluree_py.ledger.protocol.endpoint.history.HistoryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/history/#fluree_py.ledger.protocol.endpoint.history.HistoryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/query/","title":"fluree_py.ledger.protocol.endpoint.query","text":""},{"location":"reference/fluree_py/ledger/protocol/endpoint/query/#fluree_py.ledger.protocol.endpoint.query","title":"query","text":"<p>Protocols and types for building and executing queries in the Fluree ledger.</p> <p>Classes:</p> <ul> <li> <code>QueryBuilder</code>           \u2013            <p>Protocol for building query operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/query/#fluree_py.ledger.protocol.endpoint.query.QueryBuilder","title":"QueryBuilder","text":"<p>               Bases: <code>SupportsContext['QueryBuilder']</code>, <code>SupportsWhere['QueryBuilder']</code>, <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>Protocol</code></p> <p>Protocol for building query operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/query/#fluree_py.ledger.protocol.endpoint.query.QueryBuilder.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/query/#fluree_py.ledger.protocol.endpoint.query.QueryBuilder.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/","title":"fluree_py.ledger.protocol.endpoint.transaction","text":""},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/#fluree_py.ledger.protocol.endpoint.transaction","title":"transaction","text":"<p>Protocols for building and executing transactions in the Fluree ledger.</p> <p>Classes:</p> <ul> <li> <code>TransactionBuilder</code>           \u2013            <p>Protocol for building transaction operations.</p> </li> <li> <code>TransactionReadyToCommit</code>           \u2013            <p>Protocol for transaction operations ready to be committed.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/#fluree_py.ledger.protocol.endpoint.transaction.TransactionBuilder","title":"TransactionBuilder","text":"<p>               Bases: <code>SupportsContext['TransactionBuilder']</code>, <code>SupportsInsert['TransactionReadyToCommit']</code>, <code>SupportsWhere['TransactionBuilder']</code>, <code>Protocol</code></p> <p>Protocol for building transaction operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/#fluree_py.ledger.protocol.endpoint.transaction.TransactionReadyToCommit","title":"TransactionReadyToCommit","text":"<p>               Bases: <code>SupportsRequestCreation</code>, <code>SupportsCommitable</code>, <code>SupportsContext['TransactionReadyToCommit']</code>, <code>SupportsWhere['TransactionReadyToCommit']</code>, <code>HasInsertData</code>, <code>Protocol</code></p> <p>Protocol for transaction operations ready to be committed.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/#fluree_py.ledger.protocol.endpoint.transaction.TransactionReadyToCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/endpoint/transaction/#fluree_py.ledger.protocol.endpoint.transaction.TransactionReadyToCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/ledger/","title":"fluree_py.ledger.protocol.ledger","text":""},{"location":"reference/fluree_py/ledger/protocol/ledger/#fluree_py.ledger.protocol.ledger","title":"ledger","text":"<p>Classes:</p> <ul> <li> <code>SupportsLedgerOperations</code>           \u2013            <p>Protocol defining core ledger operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/ledger/#fluree_py.ledger.protocol.ledger.SupportsLedgerOperations","title":"SupportsLedgerOperations","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol defining core ledger operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/","title":"fluree_py.ledger.protocol.mixin","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin","title":"mixin","text":"<p>Protocol mixin modules for Fluree ledger operations.</p> <p>Modules:</p> <ul> <li> <code>commit</code>           \u2013            </li> <li> <code>context</code>           \u2013            </li> <li> <code>insert</code>           \u2013            </li> <li> <code>request</code>           \u2013            </li> <li> <code>where</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>HasContextData</code>           \u2013            <p>Protocol for objects that have context data.</p> </li> <li> <code>HasInsertData</code>           \u2013            <p>Protocol for objects that have insert data.</p> </li> <li> <code>SupportsAsyncCommit</code>           \u2013            <p>Protocol for objects that support asynchronous commit operations.</p> </li> <li> <code>SupportsCommit</code>           \u2013            <p>Protocol for objects that support synchronous commit operations.</p> </li> <li> <code>SupportsCommitable</code>           \u2013            <p>Protocol for objects that support both sync and async commit operations.</p> </li> <li> <code>SupportsContext</code>           \u2013            <p>Protocol for objects that support context operations.</p> </li> <li> <code>SupportsInsert</code>           \u2013            <p>Protocol for objects that support insert operations.</p> </li> <li> <code>SupportsRequestCreation</code>           \u2013            <p>Protocol for objects that support HTTP request creation.</p> </li> <li> <code>SupportsWhere</code>           \u2013            <p>Protocol for objects that support where clause operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.HasContextData","title":"HasContextData","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have context data.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.HasInsertData","title":"HasInsertData","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have insert data.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsAsyncCommit","title":"SupportsAsyncCommit","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support asynchronous commit operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsAsyncCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsCommit","title":"SupportsCommit","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support synchronous commit operations.</p> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsCommitable","title":"SupportsCommitable","text":"<p>               Bases: <code>SupportsCommit</code>, <code>SupportsAsyncCommit</code>, <code>Protocol</code></p> <p>Protocol for objects that support both sync and async commit operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsCommitable.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsCommitable.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsContext","title":"SupportsContext","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support context operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsInsert","title":"SupportsInsert","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support insert operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsRequestCreation","title":"SupportsRequestCreation","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support HTTP request creation.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/#fluree_py.ledger.protocol.mixin.SupportsWhere","title":"SupportsWhere","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support where clause operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/","title":"fluree_py.ledger.protocol.mixin.commit","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit","title":"commit","text":"<p>Classes:</p> <ul> <li> <code>SupportsAsyncCommit</code>           \u2013            <p>Protocol for objects that support asynchronous commit operations.</p> </li> <li> <code>SupportsCommit</code>           \u2013            <p>Protocol for objects that support synchronous commit operations.</p> </li> <li> <code>SupportsCommitable</code>           \u2013            <p>Protocol for objects that support both sync and async commit operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsAsyncCommit","title":"SupportsAsyncCommit","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support asynchronous commit operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsAsyncCommit.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsCommit","title":"SupportsCommit","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support synchronous commit operations.</p> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsCommit.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsCommitable","title":"SupportsCommitable","text":"<p>               Bases: <code>SupportsCommit</code>, <code>SupportsAsyncCommit</code>, <code>Protocol</code></p> <p>Protocol for objects that support both sync and async commit operations.</p> <p>Methods:</p> <ul> <li> <code>acommit</code>             \u2013              <p>Executes the transaction asynchronously.</p> </li> <li> <code>commit</code>             \u2013              <p>Executes the transaction synchronously.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsCommitable.acommit","title":"acommit  <code>async</code>","text":"<pre><code>acommit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction asynchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/commit/#fluree_py.ledger.protocol.mixin.commit.SupportsCommitable.commit","title":"commit","text":"<pre><code>commit() -&gt; FlureeResponse\n</code></pre> <p>Executes the transaction synchronously.</p> <p>Raises:</p> <ul> <li> <code>RequestError</code>             \u2013            <p>If the HTTP request fails.</p> </li> <li> <code>TypeError</code>             \u2013            <p>If the type parameter cannot be resolved.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/context/","title":"fluree_py.ledger.protocol.mixin.context","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/context/#fluree_py.ledger.protocol.mixin.context","title":"context","text":"<p>Classes:</p> <ul> <li> <code>HasContextData</code>           \u2013            <p>Protocol for objects that have context data.</p> </li> <li> <code>SupportsContext</code>           \u2013            <p>Protocol for objects that support context operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/context/#fluree_py.ledger.protocol.mixin.context.HasContextData","title":"HasContextData","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have context data.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/context/#fluree_py.ledger.protocol.mixin.context.SupportsContext","title":"SupportsContext","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support context operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/insert/","title":"fluree_py.ledger.protocol.mixin.insert","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/insert/#fluree_py.ledger.protocol.mixin.insert","title":"insert","text":"<p>Classes:</p> <ul> <li> <code>HasInsertData</code>           \u2013            <p>Protocol for objects that have insert data.</p> </li> <li> <code>SupportsInsert</code>           \u2013            <p>Protocol for objects that support insert operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/insert/#fluree_py.ledger.protocol.mixin.insert.HasInsertData","title":"HasInsertData","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have insert data.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/insert/#fluree_py.ledger.protocol.mixin.insert.SupportsInsert","title":"SupportsInsert","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support insert operations.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/request/","title":"fluree_py.ledger.protocol.mixin.request","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/request/#fluree_py.ledger.protocol.mixin.request","title":"request","text":"<p>Classes:</p> <ul> <li> <code>SupportsRequestCreation</code>           \u2013            <p>Protocol for objects that support HTTP request creation.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/request/#fluree_py.ledger.protocol.mixin.request.SupportsRequestCreation","title":"SupportsRequestCreation","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that support HTTP request creation.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/where/","title":"fluree_py.ledger.protocol.mixin.where","text":""},{"location":"reference/fluree_py/ledger/protocol/mixin/where/#fluree_py.ledger.protocol.mixin.where","title":"where","text":"<p>Classes:</p> <ul> <li> <code>HasWhereData</code>           \u2013            <p>Protocol for objects that have where clause data.</p> </li> <li> <code>SupportsWhere</code>           \u2013            <p>Protocol for objects that support where clause operations.</p> </li> </ul>"},{"location":"reference/fluree_py/ledger/protocol/mixin/where/#fluree_py.ledger.protocol.mixin.where.HasWhereData","title":"HasWhereData","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have where clause data.</p>"},{"location":"reference/fluree_py/ledger/protocol/mixin/where/#fluree_py.ledger.protocol.mixin.where.SupportsWhere","title":"SupportsWhere","text":"<p>               Bases: <code>Generic[T]</code>, <code>Protocol</code></p> <p>Protocol for objects that support where clause operations.</p>"},{"location":"reference/fluree_py/query/","title":"fluree_py.query","text":""},{"location":"reference/fluree_py/query/#fluree_py.query","title":"query","text":"<p>Modules:</p> <ul> <li> <code>history</code>           \u2013            </li> <li> <code>query</code>           \u2013            </li> <li> <code>select</code>           \u2013            </li> <li> <code>types</code>           \u2013            <p>Types used in FlureeQL queries.</p> </li> <li> <code>where</code>           \u2013            </li> </ul>"},{"location":"reference/fluree_py/query/history/","title":"fluree_py.query.history","text":""},{"location":"reference/fluree_py/query/history/#fluree_py.query.history","title":"history","text":"<p>Functions:</p> <ul> <li> <code>is_time_clause</code>             \u2013              <p>Checks if a value is a valid time clause.</p> </li> <li> <code>is_time_commit</code>             \u2013              <p>Checks if a value is a valid time commit.</p> </li> <li> <code>is_time_constraint</code>             \u2013              <p>Checks if a value is a valid time constraint.</p> </li> </ul>"},{"location":"reference/fluree_py/query/history/#fluree_py.query.history.is_time_clause","title":"is_time_clause","text":"<pre><code>is_time_clause(t: Any) -&gt; TypeGuard[TimeClause]\n</code></pre> <p>Checks if a value is a valid time clause.</p>"},{"location":"reference/fluree_py/query/history/#fluree_py.query.history.is_time_commit","title":"is_time_commit","text":"<pre><code>is_time_commit(t: Any) -&gt; TypeGuard[TimeCommit]\n</code></pre> <p>Checks if a value is a valid time commit.</p>"},{"location":"reference/fluree_py/query/history/#fluree_py.query.history.is_time_constraint","title":"is_time_constraint","text":"<pre><code>is_time_constraint(t: Any) -&gt; TypeGuard[TimeConstraint]\n</code></pre> <p>Checks if a value is a valid time constraint.</p>"},{"location":"reference/fluree_py/query/query/","title":"fluree_py.query.query","text":""},{"location":"reference/fluree_py/query/query/#fluree_py.query.query","title":"query","text":"<p>Attributes:</p> <ul> <li> <code>Context</code>               (<code>TypeAlias</code>)           \u2013            <p>A W3C JSON-LD context for a FlureeQL request.</p> </li> <li> <code>QuerySchema</code>           \u2013            <p>A schema for a FlureeQL query.</p> </li> </ul>"},{"location":"reference/fluree_py/query/query/#fluree_py.query.query.Context","title":"Context  <code>module-attribute</code>","text":"<pre><code>Context: TypeAlias = JsonObject\n</code></pre> <p>A W3C JSON-LD context for a FlureeQL request.</p>"},{"location":"reference/fluree_py/query/query/#fluree_py.query.query.QuerySchema","title":"QuerySchema  <code>module-attribute</code>","text":"<pre><code>QuerySchema = TypedDict(\n    \"QuerySchema\",\n    {\n        \"@context\": Context,\n        \"from\": str | list[str],\n        \"where\": WhereClause,\n        \"select\": SelectClause,\n        \"t\": TimeClause,\n        \"groupBy\": GroupByClause,\n        \"having\": HavingClause,\n        \"orderBy\": OrderByClause,\n    },\n)\n</code></pre> <p>A schema for a FlureeQL query.</p>"},{"location":"reference/fluree_py/query/select/","title":"fluree_py.query.select","text":""},{"location":"reference/fluree_py/query/select/#fluree_py.query.select","title":"select","text":"<p>Modules:</p> <ul> <li> <code>pydantic</code>           \u2013            </li> <li> <code>types</code>           \u2013            <p>FlureeQL Select Clause Grammar</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/","title":"fluree_py.query.select.pydantic","text":""},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic","title":"pydantic","text":"<p>Modules:</p> <ul> <li> <code>builder</code>           \u2013            </li> <li> <code>error</code>           \u2013            </li> <li> <code>type_checker</code>           \u2013            </li> <li> <code>warning</code>           \u2013            </li> <li> <code>warning_manager</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>DeeplyNestedStructureError</code>           \u2013            <p>Exception raised when encountering unsupported deeply nested structures.</p> </li> <li> <code>FlureeSelectBuilder</code>           \u2013            <p>Builds Fluree select queries from Pydantic models.</p> </li> <li> <code>FlureeSelectError</code>           \u2013            <p>Base exception for Fluree select query building errors.</p> </li> <li> <code>InvalidFieldTypeError</code>           \u2013            <p>Exception raised when encountering an invalid field type.</p> </li> <li> <code>ListOrderWarning</code>           \u2013            <p>Warning raised when a field is a list type, indicating non-deterministic order.</p> </li> <li> <code>MissingIdFieldError</code>           \u2013            <p>Exception raised when a model is missing a required 'id' field.</p> </li> <li> <code>ModelConfigError</code>           \u2013            <p>Exception raised when there's an issue with the model configuration.</p> </li> <li> <code>PossibleEmptyModelWarning</code>           \u2013            <p>Warning raised when a model has only optional fields.</p> </li> <li> <code>TypeProcessingError</code>           \u2013            <p>Exception raised when there's an error processing a type.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>from_pydantic</code>             \u2013              <p>Convert a Pydantic model to a Fluree select query structure.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.DeeplyNestedStructureError","title":"DeeplyNestedStructureError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when encountering unsupported deeply nested structures.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.FlureeSelectBuilder","title":"FlureeSelectBuilder  <code>dataclass</code>","text":"<pre><code>FlureeSelectBuilder(\n    warning_manager: WarningManager = WarningManager(),\n    select: list[Any] = lambda: [\"*\"](),\n    _processed_models: set[type[BaseModel]] = set(),\n)\n</code></pre> <p>Builds Fluree select queries from Pydantic models.</p> Example <p>class User(BaseModel): ...     id: str ...     name: str builder = FlureeSelectBuilder() query = builder.build(User) assert query == [\"*\"]</p> <p>Methods:</p> <ul> <li> <code>build</code>             \u2013              <p>Build a Fluree select query structure from a Pydantic model.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.FlureeSelectBuilder.build","title":"build","text":"<pre><code>build(pydantic_model: type[BaseModel]) -&gt; list[Any]\n</code></pre> <p>Build a Fluree select query structure from a Pydantic model.</p> <p>Raises:</p> <ul> <li> <code>MissingIdFieldError</code>             \u2013            <p>If the model is missing a required 'id' field</p> </li> <li> <code>DeeplyNestedStructureError</code>             \u2013            <p>If the model contains unsupported deeply nested structures</p> </li> <li> <code>ModelConfigError</code>             \u2013            <p>If there's an issue with the model configuration</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.FlureeSelectError","title":"FlureeSelectError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for Fluree select query building errors.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.InvalidFieldTypeError","title":"InvalidFieldTypeError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when encountering an invalid field type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.ListOrderWarning","title":"ListOrderWarning","text":"<p>               Bases: <code>RuntimeWarning</code></p> <p>Warning raised when a field is a list type, indicating non-deterministic order.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.MissingIdFieldError","title":"MissingIdFieldError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when a model is missing a required 'id' field.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.ModelConfigError","title":"ModelConfigError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when there's an issue with the model configuration.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.PossibleEmptyModelWarning","title":"PossibleEmptyModelWarning","text":"<p>               Bases: <code>RuntimeWarning</code></p> <p>Warning raised when a model has only optional fields.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.TypeProcessingError","title":"TypeProcessingError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when there's an error processing a type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/#fluree_py.query.select.pydantic.from_pydantic","title":"from_pydantic","text":"<pre><code>from_pydantic(model: type[BaseModel]) -&gt; list[Any]\n</code></pre> <p>Convert a Pydantic model to a Fluree select query structure.</p> Example <p>class User(BaseModel): ...     id: str ...     name: str query = from_pydantic(User) assert query == [\"*\"]</p>"},{"location":"reference/fluree_py/query/select/pydantic/builder/","title":"fluree_py.query.select.pydantic.builder","text":""},{"location":"reference/fluree_py/query/select/pydantic/builder/#fluree_py.query.select.pydantic.builder","title":"builder","text":"<p>Classes:</p> <ul> <li> <code>FlureeSelectBuilder</code>           \u2013            <p>Builds Fluree select queries from Pydantic models.</p> </li> <li> <code>HasModelConfig</code>           \u2013            <p>Protocol for objects that have a model_config attribute.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>from_pydantic</code>             \u2013              <p>Convert a Pydantic model to a Fluree select query structure.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/builder/#fluree_py.query.select.pydantic.builder.FlureeSelectBuilder","title":"FlureeSelectBuilder  <code>dataclass</code>","text":"<pre><code>FlureeSelectBuilder(\n    warning_manager: WarningManager = WarningManager(),\n    select: list[Any] = lambda: [\"*\"](),\n    _processed_models: set[type[BaseModel]] = set(),\n)\n</code></pre> <p>Builds Fluree select queries from Pydantic models.</p> Example <p>class User(BaseModel): ...     id: str ...     name: str builder = FlureeSelectBuilder() query = builder.build(User) assert query == [\"*\"]</p> <p>Methods:</p> <ul> <li> <code>build</code>             \u2013              <p>Build a Fluree select query structure from a Pydantic model.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/builder/#fluree_py.query.select.pydantic.builder.FlureeSelectBuilder.build","title":"build","text":"<pre><code>build(pydantic_model: type[BaseModel]) -&gt; list[Any]\n</code></pre> <p>Build a Fluree select query structure from a Pydantic model.</p> <p>Raises:</p> <ul> <li> <code>MissingIdFieldError</code>             \u2013            <p>If the model is missing a required 'id' field</p> </li> <li> <code>DeeplyNestedStructureError</code>             \u2013            <p>If the model contains unsupported deeply nested structures</p> </li> <li> <code>ModelConfigError</code>             \u2013            <p>If there's an issue with the model configuration</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/builder/#fluree_py.query.select.pydantic.builder.HasModelConfig","title":"HasModelConfig","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for objects that have a model_config attribute.</p>"},{"location":"reference/fluree_py/query/select/pydantic/builder/#fluree_py.query.select.pydantic.builder.from_pydantic","title":"from_pydantic","text":"<pre><code>from_pydantic(model: type[BaseModel]) -&gt; list[Any]\n</code></pre> <p>Convert a Pydantic model to a Fluree select query structure.</p> Example <p>class User(BaseModel): ...     id: str ...     name: str query = from_pydantic(User) assert query == [\"*\"]</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/","title":"fluree_py.query.select.pydantic.error","text":""},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error","title":"error","text":"<p>Classes:</p> <ul> <li> <code>DeeplyNestedStructureError</code>           \u2013            <p>Exception raised when encountering unsupported deeply nested structures.</p> </li> <li> <code>FlureeSelectError</code>           \u2013            <p>Base exception for Fluree select query building errors.</p> </li> <li> <code>InvalidFieldTypeError</code>           \u2013            <p>Exception raised when encountering an invalid field type.</p> </li> <li> <code>MissingIdFieldError</code>           \u2013            <p>Exception raised when a model is missing a required 'id' field.</p> </li> <li> <code>ModelConfigError</code>           \u2013            <p>Exception raised when there's an issue with the model configuration.</p> </li> <li> <code>TypeProcessingError</code>           \u2013            <p>Exception raised when there's an error processing a type.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.DeeplyNestedStructureError","title":"DeeplyNestedStructureError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when encountering unsupported deeply nested structures.</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.FlureeSelectError","title":"FlureeSelectError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for Fluree select query building errors.</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.InvalidFieldTypeError","title":"InvalidFieldTypeError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when encountering an invalid field type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.MissingIdFieldError","title":"MissingIdFieldError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when a model is missing a required 'id' field.</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.ModelConfigError","title":"ModelConfigError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when there's an issue with the model configuration.</p>"},{"location":"reference/fluree_py/query/select/pydantic/error/#fluree_py.query.select.pydantic.error.TypeProcessingError","title":"TypeProcessingError","text":"<p>               Bases: <code>FlureeSelectError</code></p> <p>Exception raised when there's an error processing a type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/","title":"fluree_py.query.select.pydantic.type_checker","text":""},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker","title":"type_checker","text":"<p>Classes:</p> <ul> <li> <code>TypeChecker</code>           \u2013            <p>Handles type checking and validation for Pydantic models.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker","title":"TypeChecker","text":"<p>Handles type checking and validation for Pydantic models.</p> <p>This class provides utility methods for checking various types that can appear in Pydantic models, such as lists, dictionaries, and nested models.</p> <p>Methods:</p> <ul> <li> <code>check_model_has_id</code>             \u2013              <p>Check if a model has an id field in its type hints.</p> </li> <li> <code>check_model_requires_id</code>             \u2013              <p>Check if a model requires an id field based on its configuration.</p> </li> <li> <code>dict_max_depth</code>             \u2013              <p>Recursively count dictionary nesting depth.</p> </li> <li> <code>get_real_type</code>             \u2013              <p>Get the real type from a potentially optional/union type.</p> </li> <li> <code>has_model_config</code>             \u2013              <p>Check if a model has a model_config attribute.</p> </li> <li> <code>is_base_model</code>             \u2013              <p>Check if a type is a BaseModel.</p> </li> <li> <code>is_dict_type</code>             \u2013              <p>Check if a type is a dict type.</p> </li> <li> <code>is_id_field</code>             \u2013              <p>Check if a field name is the id field.</p> </li> <li> <code>is_list_type</code>             \u2013              <p>Check if a type is a list type.</p> </li> <li> <code>is_primitive_type</code>             \u2013              <p>Check if a type is a primitive type (str, int, float, bool).</p> </li> <li> <code>is_tuple_type</code>             \u2013              <p>Check if a type is a tuple type.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.check_model_has_id","title":"check_model_has_id  <code>classmethod</code>","text":"<pre><code>check_model_has_id(model: type[BaseModel]) -&gt; bool\n</code></pre> <p>Check if a model has an id field in its type hints.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.check_model_requires_id","title":"check_model_requires_id  <code>classmethod</code>","text":"<pre><code>check_model_requires_id(model: type[BaseModel]) -&gt; bool\n</code></pre> <p>Check if a model requires an id field based on its configuration.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.dict_max_depth","title":"dict_max_depth  <code>classmethod</code>","text":"<pre><code>dict_max_depth(field_type: Any, depth: int = 0) -&gt; int\n</code></pre> <p>Recursively count dictionary nesting depth.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.get_real_type","title":"get_real_type  <code>classmethod</code>","text":"<pre><code>get_real_type(field_type: Any) -&gt; Any\n</code></pre> <p>Get the real type from a potentially optional/union type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.has_model_config","title":"has_model_config  <code>classmethod</code>","text":"<pre><code>has_model_config(model: type[BaseModel]) -&gt; bool\n</code></pre> <p>Check if a model has a model_config attribute.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_base_model","title":"is_base_model  <code>classmethod</code>","text":"<pre><code>is_base_model(field_type: Any) -&gt; TypeGuard[type[BaseModel]]\n</code></pre> <p>Check if a type is a BaseModel.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_dict_type","title":"is_dict_type  <code>classmethod</code>","text":"<pre><code>is_dict_type(field_type: Any) -&gt; TypeGuard[type[dict[str, Any]]]\n</code></pre> <p>Check if a type is a dict type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_id_field","title":"is_id_field  <code>classmethod</code>","text":"<pre><code>is_id_field(field_name: str) -&gt; bool\n</code></pre> <p>Check if a field name is the id field.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_list_type","title":"is_list_type  <code>classmethod</code>","text":"<pre><code>is_list_type(field_type: Any) -&gt; TypeGuard[type[list[Any]]]\n</code></pre> <p>Check if a type is a list type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_primitive_type","title":"is_primitive_type  <code>classmethod</code>","text":"<pre><code>is_primitive_type(field_type: Any) -&gt; bool\n</code></pre> <p>Check if a type is a primitive type (str, int, float, bool).</p>"},{"location":"reference/fluree_py/query/select/pydantic/type_checker/#fluree_py.query.select.pydantic.type_checker.TypeChecker.is_tuple_type","title":"is_tuple_type  <code>classmethod</code>","text":"<pre><code>is_tuple_type(field_type: Any) -&gt; TypeGuard[type[tuple[Any, ...]]]\n</code></pre> <p>Check if a type is a tuple type.</p>"},{"location":"reference/fluree_py/query/select/pydantic/warning/","title":"fluree_py.query.select.pydantic.warning","text":""},{"location":"reference/fluree_py/query/select/pydantic/warning/#fluree_py.query.select.pydantic.warning","title":"warning","text":"<p>Classes:</p> <ul> <li> <code>ListOrderWarning</code>           \u2013            <p>Warning raised when a field is a list type, indicating non-deterministic order.</p> </li> <li> <code>PossibleEmptyModelWarning</code>           \u2013            <p>Warning raised when a model has only optional fields.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/warning/#fluree_py.query.select.pydantic.warning.ListOrderWarning","title":"ListOrderWarning","text":"<p>               Bases: <code>RuntimeWarning</code></p> <p>Warning raised when a field is a list type, indicating non-deterministic order.</p>"},{"location":"reference/fluree_py/query/select/pydantic/warning/#fluree_py.query.select.pydantic.warning.PossibleEmptyModelWarning","title":"PossibleEmptyModelWarning","text":"<p>               Bases: <code>RuntimeWarning</code></p> <p>Warning raised when a model has only optional fields.</p>"},{"location":"reference/fluree_py/query/select/pydantic/warning_manager/","title":"fluree_py.query.select.pydantic.warning_manager","text":""},{"location":"reference/fluree_py/query/select/pydantic/warning_manager/#fluree_py.query.select.pydantic.warning_manager","title":"warning_manager","text":"<p>Classes:</p> <ul> <li> <code>WarningManager</code>           \u2013            <p>Manages warnings for the Pydantic model processing.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/warning_manager/#fluree_py.query.select.pydantic.warning_manager.WarningManager","title":"WarningManager  <code>dataclass</code>","text":"<pre><code>WarningManager(warnings_list: list[tuple[type[Warning], str]] = list())\n</code></pre> <p>Manages warnings for the Pydantic model processing.</p> Example <p>manager = WarningManager() manager.add_warning(ListOrderWarning, \"Field 'items' is a list\") manager.emit_warnings()</p> <p>Methods:</p> <ul> <li> <code>add_warning</code>             \u2013              <p>Add a warning to the list.</p> </li> <li> <code>emit_warnings</code>             \u2013              <p>Emit all collected warnings.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/pydantic/warning_manager/#fluree_py.query.select.pydantic.warning_manager.WarningManager.add_warning","title":"add_warning","text":"<pre><code>add_warning(warning_type: type[Warning], message: str) -&gt; None\n</code></pre> <p>Add a warning to the list.</p>"},{"location":"reference/fluree_py/query/select/pydantic/warning_manager/#fluree_py.query.select.pydantic.warning_manager.WarningManager.emit_warnings","title":"emit_warnings","text":"<pre><code>emit_warnings() -&gt; None\n</code></pre> <p>Emit all collected warnings.</p>"},{"location":"reference/fluree_py/query/select/types/","title":"fluree_py.query.select.types","text":""},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types","title":"types","text":"<p>FlureeQL Select Clause Grammar</p> <p>The select clause in FlureeQL determines the structure and content of query results. It can be either a select object or a select array.</p> <p>This grammar defines the syntax for FlureeQL select clauses. The types defined below in this file implement this grammar in Python.</p> <p>Grammar (EBNF): <pre><code>    (* Main select clause structure *)\n    SelectClause = SelectObject | SelectArray\n\n    (* Select object maps logic variables to expressions *)\n    SelectObject = \"{\" LogicVariable \":\" SelectExpressionList \"}\"\n    SelectExpressionList = [SelectExpression {\",\" SelectExpression}]\n\n    (* Select array contains variables or objects *)\n    SelectArray = \"[\" SelectArrayElement {\",\" SelectArrayElement} \"]\"\n    SelectArrayElement = LogicVariable | SelectObject\n\n    (* Expression types *)\n    SelectExpression = Wildcard | Predicate | NodeObjectTemplate\n    NodeObjectTemplate = \"{\" Predicate \":\" SelectExpressionList \"}\"\n\n    (* Basic elements *)\n    LogicVariable = \"?\" (letter | digit | \"-\" | \"_\") {letter | digit | \"-\" | \"_\"}\n    Predicate = string\n    Wildcard = \"*\"\n\n    (* Character sets *)\n    letter = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\" | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\"\n    digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n    string = '\"' {character} '\"'\n    character = letter | digit | \"-\" | \"_\" | \":\" | \".\"\n</code></pre></p> Example Queries <p>Functions:</p> <ul> <li> <code>is_logic_variable</code>             \u2013              <p>Type guard to check if a string is a valid logic variable.</p> </li> <li> <code>is_node_object_template</code>             \u2013              <p>Type guard to check if a value is a valid node object template.</p> </li> <li> <code>is_select_array</code>             \u2013              <p>Type guard to check if a value is a valid select array.</p> </li> <li> <code>is_select_array_element</code>             \u2013              <p>Type guard to check if a value is a valid select array element.</p> </li> <li> <code>is_select_object</code>             \u2013              <p>Type guard to check if a value is a valid select object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>LogicVariable</code>               (<code>TypeAlias</code>)           \u2013            <p>A logic variable name in a FlureeQL query.</p> </li> <li> <code>NodeObjectTemplate</code>               (<code>TypeAlias</code>)           \u2013            <p>A node object template in a FlureeQL query.</p> </li> <li> <code>Predicate</code>               (<code>TypeAlias</code>)           \u2013            <p>A predicate identifier in a FlureeQL query.</p> </li> <li> <code>SelectArray</code>               (<code>TypeAlias</code>)           \u2013            <p>A select array in a FlureeQL query.</p> </li> <li> <code>SelectArrayElement</code>               (<code>TypeAlias</code>)           \u2013            <p>An element in a select array in a FlureeQL query.</p> </li> <li> <code>SelectExpression</code>               (<code>TypeAlias</code>)           \u2013            <p>A select expression in a FlureeQL query.</p> </li> <li> <code>SelectExpressionList</code>               (<code>TypeAlias</code>)           \u2013            <p>A list of select expressions in a FlureeQL query.</p> </li> <li> <code>SelectObject</code>               (<code>TypeAlias</code>)           \u2013            <p>A select object in a FlureeQL query.</p> </li> <li> <code>Wildcard</code>               (<code>TypeAlias</code>)           \u2013            <p>A wildcard character in a FlureeQL query.</p> </li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types--select-object-get-name-and-all-predicates-of-best-friend","title":"Select object - get name and all predicates of best friend","text":"<ul> <li>{ \"?s\": [ \"name\", { \"bestFriend\": [\"*\"] } ] }</li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types--select-array-get-multiple-variables-and-objects","title":"Select array - get multiple variables and objects","text":"<ul> <li>[\"?s\", \"?name\", \"?friend\"]</li> <li>[ { \"?s\": [\"\"] }, { \"?friend\": [\"\"] } ]</li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types--node-object-template-nested-data-structures","title":"Node object template - nested data structures","text":"<ul> <li>{ \"schema:address\": [\"*\"] }                    # Get all address predicates</li> <li>{ \"bestFriend\": [\"*\"] }                        # Get all best friend predicates</li> <li>{ \"bestFriend\": [ { \"address\": [\"*\"] } ] }     # Get address of best friend</li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types--logic-variable-examples","title":"Logic variable examples","text":"<ul> <li>\"?firstname\"</li> <li>\"?first-name\"</li> <li>\"?first_name\"</li> <li>\"?address-1\"</li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.LogicVariable","title":"LogicVariable  <code>module-attribute</code>","text":"<pre><code>LogicVariable: TypeAlias = str\n</code></pre> <p>A logic variable name in a FlureeQL query. Logic variables are strings that begin with a question mark, ?, followed by alphanumeric characters, hyphens, and underscores. They are used to bind subjects to variables in the query.</p> Example Queries <p>\"?firstname\" \"?first-name\" \"?first_name\" \"?address-1\"</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.NodeObjectTemplate","title":"NodeObjectTemplate  <code>module-attribute</code>","text":"<pre><code>NodeObjectTemplate: TypeAlias = dict[Predicate, 'SelectExpressionList']\n</code></pre> <p>A node object template in a FlureeQL query. Node object templates define how to traverse nested predicate values. They are objects where the keys are predicates, and the values are arrays of select expressions. This allows for recursive querying of nested data structures.</p> Example Queries <p>{ \"schema:address\": [\"*\"] }</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.NodeObjectTemplate--return-an-object-that-has-all-predicates-for-the-node-that-bestfriend-refers-to","title":"Return an object that has all predicates for the node that \"bestFriend\" refers to","text":"<p>{ \"bestFriend\": [\"*\"] }</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.NodeObjectTemplate--multi-level-nested-object","title":"Multi-level nested object","text":"<p>{ \"bestFriend\": [ { \"address\": [\"*\"] } ] }</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.Predicate","title":"Predicate  <code>module-attribute</code>","text":"<pre><code>Predicate: TypeAlias = str\n</code></pre> <p>A predicate identifier in a FlureeQL query. A predicate is a string that identifies a property or relationship in the database.</p> <p>Examples:</p> <p>\"schema:name\" \"schema:age\" \"schema:friend\"</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectArray","title":"SelectArray  <code>module-attribute</code>","text":"<pre><code>SelectArray: TypeAlias = list[SelectArrayElement]\n</code></pre> <p>A select array in a FlureeQL query. A select array is a list containing logic variables or select objects. When using a select array, each element of the query results will be an array containing the values for each element in the select array.</p> Example Queries <p>[\"?s\", \"?name\", \"?friend\"][ { \"?s\": [\"*\"] }, { \"?friend\": [\"*\"] } ]</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectArrayElement","title":"SelectArrayElement  <code>module-attribute</code>","text":"<pre><code>SelectArrayElement: TypeAlias = LogicVariable | SelectObject\n</code></pre> <p>An element in a select array in a FlureeQL query. An element in a select array can be either a logic variable or a select object.</p> Example Queries <p>\"?s\"</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectClause","title":"SelectClause  <code>module-attribute</code>","text":"<pre><code>SelectClause: TypeAlias = SelectObject | SelectArray\n</code></pre> <p>A select clause in a FlureeQL query. A select clause can be either a select object or a select array.</p> Example Queries <ul> <li>{ \"?s\": [ \"name\", { \"bestFriend\": [\"*\"] } ] }</li> <li>[\"?s\", \"?name\", \"?friend\"]</li> </ul>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectExpression","title":"SelectExpression  <code>module-attribute</code>","text":"<pre><code>SelectExpression: TypeAlias = Wildcard | Predicate | 'NodeObjectTemplate'\n</code></pre> <p>A select expression in a FlureeQL query. Select expressions define what data to include in the query results. They can be: 1. A predicate (e.g., \"schema:name\") - includes the value of that predicate 2. The wildcard \"*\" - includes all predicates of the subject 3. A node object template - traverses nested predicate values</p> Example Queries <p>[\"name\", { \"bestFriend\": [\"*\"] }]</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectExpressionList","title":"SelectExpressionList  <code>module-attribute</code>","text":"<pre><code>SelectExpressionList: TypeAlias = list[SelectExpression]\n</code></pre> <p>A list of select expressions in a FlureeQL query. Used in both select objects and node templates to specify multiple expressions.</p> Example Queries <p>[\"name\", \"\", { \"bestFriend\": [\"\"] }]</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.SelectObject","title":"SelectObject  <code>module-attribute</code>","text":"<pre><code>SelectObject: TypeAlias = dict[LogicVariable, SelectExpressionList]\n</code></pre> <p>A select object in a FlureeQL query. A select object maps logic variables to arrays of select expressions. Each logic variable corresponds to a set of subjects, and for each subject, a JSON object is constructed based on the select expressions.</p> Example Queries <p>{ \"?s\": [ \"name\", { \"bestFriend\": [\"*\"] } ] }</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.Wildcard","title":"Wildcard  <code>module-attribute</code>","text":"<pre><code>Wildcard: TypeAlias = Literal['*']\n</code></pre> <p>A wildcard character in a FlureeQL query. The wildcard character is used to select all predicates of a subject.</p> <p>Examples:</p> <p>\"*\"</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.is_logic_variable","title":"is_logic_variable","text":"<pre><code>is_logic_variable(var: str) -&gt; TypeGuard[LogicVariable]\n</code></pre> <p>Type guard to check if a string is a valid logic variable.</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.is_node_object_template","title":"is_node_object_template","text":"<pre><code>is_node_object_template(var: Any) -&gt; TypeGuard[NodeObjectTemplate]\n</code></pre> <p>Type guard to check if a value is a valid node object template.</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.is_select_array","title":"is_select_array","text":"<pre><code>is_select_array(var: Any) -&gt; TypeGuard[SelectArray]\n</code></pre> <p>Type guard to check if a value is a valid select array.</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.is_select_array_element","title":"is_select_array_element","text":"<pre><code>is_select_array_element(var: Any) -&gt; TypeGuard[SelectArrayElement]\n</code></pre> <p>Type guard to check if a value is a valid select array element.</p>"},{"location":"reference/fluree_py/query/select/types/#fluree_py.query.select.types.is_select_object","title":"is_select_object","text":"<pre><code>is_select_object(var: Any) -&gt; TypeGuard[SelectObject]\n</code></pre> <p>Type guard to check if a value is a valid select object.</p>"},{"location":"reference/fluree_py/query/types/","title":"fluree_py.query.types","text":""},{"location":"reference/fluree_py/query/types/#fluree_py.query.types","title":"types","text":"<p>Types used in FlureeQL queries.</p> <p>Attributes:</p> <ul> <li> <code>Predicate</code>               (<code>TypeAlias</code>)           \u2013            <p>A predicate identifier in a FlureeQL query.</p> </li> <li> <code>Wildcard</code>               (<code>TypeAlias</code>)           \u2013            <p>A wildcard character in a FlureeQL query.</p> </li> </ul>"},{"location":"reference/fluree_py/query/types/#fluree_py.query.types.Predicate","title":"Predicate  <code>module-attribute</code>","text":"<pre><code>Predicate: TypeAlias = str\n</code></pre> <p>A predicate identifier in a FlureeQL query. A predicate is a string that identifies a property or relationship in the database.</p> <p>Examples:</p> <p>\"schema:name\" \"schema:age\" \"schema:friend\"</p>"},{"location":"reference/fluree_py/query/types/#fluree_py.query.types.Wildcard","title":"Wildcard  <code>module-attribute</code>","text":"<pre><code>Wildcard: TypeAlias = Literal['*']\n</code></pre> <p>A wildcard character in a FlureeQL query. The wildcard character is used to select all predicates of a subject.</p> <p>Examples:</p> <p>\"*\"</p>"},{"location":"reference/fluree_py/query/where/","title":"fluree_py.query.where","text":""},{"location":"reference/fluree_py/query/where/#fluree_py.query.where","title":"where","text":"<p>Functions:</p> <ul> <li> <code>is_filter_expression</code>             \u2013              <p>Type guard to check if a string is a valid filter expression.</p> </li> </ul>"},{"location":"reference/fluree_py/query/where/#fluree_py.query.where.is_filter_expression","title":"is_filter_expression","text":"<pre><code>is_filter_expression(var: str) -&gt; TypeGuard[WhereFilterExpression]\n</code></pre> <p>Type guard to check if a string is a valid filter expression.</p>"},{"location":"reference/fluree_py/response/","title":"fluree_py.response","text":""},{"location":"reference/fluree_py/response/#fluree_py.response","title":"response","text":"<p>Classes:</p> <ul> <li> <code>FlureeResponse</code>           \u2013            </li> </ul>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse","title":"FlureeResponse  <code>dataclass</code>","text":"<pre><code>FlureeResponse(*, response: Response)\n</code></pre> <p>Methods:</p> <ul> <li> <code>cast</code>             \u2013              <p>Cast the JSON response to a specific type.</p> </li> <li> <code>json</code>             \u2013              <p>Parse the response as JSON.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>bytes</code>               (<code>bytes</code>)           \u2013            <p>Get the response bytes.</p> </li> <li> <code>headers</code>               (<code>Headers</code>)           \u2013            <p>Get the response headers.</p> </li> <li> <code>is_success</code>               (<code>bool</code>)           \u2013            <p>Check if the response was successful.</p> </li> <li> <code>status_code</code>               (<code>int</code>)           \u2013            <p>Get the response status code.</p> </li> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Get the response text.</p> </li> </ul>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.bytes","title":"bytes  <code>property</code>","text":"<pre><code>bytes: bytes\n</code></pre> <p>Get the response bytes.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers: Headers\n</code></pre> <p>Get the response headers.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Check if the response was successful.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.status_code","title":"status_code  <code>property</code>","text":"<pre><code>status_code: int\n</code></pre> <p>Get the response status code.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.text","title":"text  <code>property</code>","text":"<pre><code>text: str\n</code></pre> <p>Get the response text.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.cast","title":"cast","text":"<pre><code>cast(type_: type[T]) -&gt; T\n</code></pre> <p>Cast the JSON response to a specific type.</p>"},{"location":"reference/fluree_py/response/#fluree_py.response.FlureeResponse.json","title":"json","text":"<pre><code>json() -&gt; JsonObject | JsonArray\n</code></pre> <p>Parse the response as JSON.</p>"},{"location":"reference/fluree_py/types/","title":"fluree_py.types","text":""},{"location":"reference/fluree_py/types/#fluree_py.types","title":"types","text":"<p>Common type definitions for the fluree-py package.</p> <p>This module provides type aliases for JSON-serializable data structures used throughout the fluree-py package. These types are used to ensure type safety when working with Fluree's JSON-based API.</p> Types <p>JsonObject: A dictionary with string keys and any JSON-serializable values.            Used for representing JSON objects in Fluree queries and responses.</p> <p>JsonArray: A list of any JSON-serializable values.            Used for representing JSON arrays in Fluree queries and responses.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # JsonObject example\n&gt;&gt;&gt; query: JsonObject = {\n...     \"select\": [\"*\"],\n...     \"where\": {\"@id\": \"?s\"}\n... }\n</code></pre> <pre><code>&gt;&gt;&gt; # JsonArray example\n&gt;&gt;&gt; results: JsonArray = [\n...     {\"@id\": \"person/1\", \"name\": \"John\"},\n...     {\"@id\": \"person/2\", \"name\": \"Jane\"}\n... ]\n</code></pre>"}]}